Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]

class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        stack =[]
        left,right =0,0
        def backtrack(s,left,right):
            if(left==n and right ==n):
                stack.append(s)
                return
            if(left<n):
                backtrack(s+'(', left+1,right)
            if(right<left):
                backtrack(s+')', left,right+1)
        
        backtrack('',left,right)
        
        return stack
