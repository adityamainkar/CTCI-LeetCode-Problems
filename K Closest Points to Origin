We have a list of points on the plane.  Find the K closest points to the origin (0, 0).

(Here, the distance between two points on a plane is the Euclidean distance.)

You may return the answer in any order.  The answer is guaranteed to be unique (except for the order that it is in.)

Example 1:

Input: points = [[1,3],[-2,2]], K = 1
Output: [[-2,2]]
Explanation: 
The distance between (1, 3) and the origin is sqrt(10).
The distance between (-2, 2) and the origin is sqrt(8).
Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
We only want the closest K = 1 points from the origin, so the answer is just [[-2,2]].

Method 1: Using min-heap klogN operations. More efficient to use max-heap:
Time: O(klogn)
Space: O(n)
from heapq import heappush, heappop
class Solution:
    def kClosest(self, points: List[List[int]], K: int) -> List[List[int]]:
        heap = []
        for i in range(0,len(points)):
            d = points[i][0]*points[i][0] + points[i][1]*points[i][1]
            heap.append((d, [points[i][0], points[i][1]]))
        #print(heap)    
        heapq.heapify(heap)
        res,i = [],0
        while(i<K and (len(heap)>0)):
            _,x = heapq.heappop(heap)
            res.append(x)
            i+=1
        print(res)
        return (res)
        
        
        
 Method 2)       
Optimize to Max-heap: keep the size of K, and once after add the new element but the size is greater than K, then we must pop the farest point which is on the top of our heap.
Time: O(nlogk)
Space: O(k)

class Solution(object):
    def kClosest(self, points, K):
        """
        :type points: List[List[int]]
        :type K: int
        :rtype: List[List[int]]
        """
        heap = []
        for i in range(len(points)):
            dis = points[i][0] ** 2 + points[i][1] ** 2
            heapq.heappush(heap, (-dis, points[i][0], points[i][1]))
            if len(heap) > K:
                heapq.heappop(heap)
            
        res = []
        
        return [heapq.heappop(heap)[1:] for _ in range(len(heap))]  
