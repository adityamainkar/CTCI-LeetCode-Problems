Regular Expression Matching
Given an input string (s) and a pattern (p), implement regular expression matching with support for '.' and '*'.

'.' Matches any single character.
'*' Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).

Note:

s could be empty and contains only lowercase letters a-z.
p could be empty and contains only lowercase letters a-z, and characters like . or *.
Example 1:

Input:
s = "aa"
p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".
Example 2:

Input:
s = "aa"
p = "a*"
Output: true
Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes "aa".
Example 3:

Input:
s = "ab"
p = ".*"
Output: true
Explanation: ".*" means "zero or more (*) of any character (.)".
Example 4:

Input:
s = "aab"
p = "c*a*b"
Output: true
Explanation: c can be repeated 0 times, a can be repeated 1 time. Therefore, it matches "aab".
Example 5:

Input:
s = "mississippi"
p = "mis*is*p*."
Output: false



Video used to build recurrance: https://www.youtube.com/watch?v=l3hda49XcDE
Time: O(mn)
Space O(mn)

class Solution:
    def isMatch(self, s: str, p: str) -> bool:
    #  Initially        T[i][j] = False
    #                   T[i][j] = T[i-1][j-1] if s[i] = p[j] or p[j] =.
    # 0 preceding case :T[i][j] = T[i][j-2] if p[j] = *
    # More charc.       T[i][j] = T[i-1][j] if s[i] = P[j-1]  and p[j] = * eg: p = xa* s = xa
    #                   T[i][j] = T[i-1][j] if p[j-1] = . and p[j] = *
        
        m = (len(s)+1)
        n = (len(p)+1)
        T = [[False] * n for _ in range(m)]
        T[0][0] = True
        #Deals with patterns like a* or a*b* or a*b*c*
        for i in range(1,n-1):
            if(p[i] == '*'):
                T[0][i+1] = T[0][i-1]
            
        for i in range(0,m-1):
            for j in range(0,n-1):
                print("i {} j {}".format(i,j))
                if(s[i] == p[j] or p[j] =='.'):
                    T[i+1][j+1] = T[i][j]
                    continue
                if (p[j] == '*'):
                    if T[i+1][j-1] == True:
                        T[i+1][j+1] = True
                        continue
                    if (s[i] == p[j-1]) :# p = xa* s = x
                        T[i+1][j+1] = T[i][j+1]
                        continue
                    if (p[j-1] == '.') :
                        T[i+1][j+1] = T[i][j+1]
                        continue
        #print(T)
        return T[m-1][n-1]
