Given a string s, you are allowed to convert it to a palindrome by adding characters in front of it. Find and return the shortest palindrome you can find by performing this transformation.

Example 1:

Input: "aacecaaa"
Output: "aaacecaaa"
Example 2:

Input: "abcd"
Output: "dcbabcd"



The key of KMP is to build a look up table that records the match result of prefix and postfix. The KMP matching algorithm uses degenerating property (pattern having same sub-patterns appearing more than once in the pattern) of the pattern and improves the worst case complexity to O(n)
Value in the table means the max len of matching substring that exists in both prefix and postfix.
Name lps indicates longest proper prefix which is also suffix.. A proper prefix is prefix with whole string not allowed. For example, prefixes of “ABC” are “”, “A”, “AB” and “ABC”. Proper prefixes are “”, “A” and “AB”. Suffixes of the string are “”, “C”, “BC” and “ABC”.
lps[i] = the longest proper prefix of s[0..i]
which is also a suffix of s[0..i].
For the pattern “AABAACAABAA”,
lps[] is [0, 1, 0, 1, 2, 0, 1, 2, 3, 4, 5]

For the pattern “AAACAAAAAC”,
lps[] is [0, 1, 2, 0, 1, 2, 3, 3, 3, 4]
The while loop just constructs this lps array.
**So for our problem Algorithm:

Create Temp String with s + # + reverse of s
Run KMP in while loop as shown on this bigger string
The value (lps[-1]) in last cell will be the max length which is prefix and suffix in s.
Hence min length palin. string will be (reverse part of string from that location +string)**
class Solution:
    def shortestPalindrome(self, s: str) -> str:
        A=s+"#"+s[::-1]
        lps=[0]len(A)
        i,j= 1,0
        while(i<len(A)):
            #print("i=",i,"j=",j)
            if(A[i] == A[j]):
                j+=1
                lps[i] = j
                i+=1 
            else:
                if(j!=0):
                    j=lps[j-1]
                else:
                    lps[i] = 0
                    i += 1
        return(s[lps[-1]:][::-1]+s)
