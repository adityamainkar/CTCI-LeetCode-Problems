Given the root node of a binary search tree, return the sum of values of all nodes with value between L and R (inclusive).

The binary search tree is guaranteed to have unique values.

 

Example 1:

Input: root = [10,5,15,3,7,null,18], L = 7, R = 15
Output: 32

Method 1: Recursion
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def rangeSumBST(self, root: TreeNode, L: int, R: int) -> int:
        
        
        
        def dosum(node,low,high,result):
            if node is None:
                return 0
            if node.val >= low and node.val <= high:
                v= node.val
            else:
                v=0
            if node.val > low:
                sl=dosum(node.left,low,high,0)
            else:
                sl=0
            if node.val < high:
                sr=dosum(node.right,low,high,0)
            else:
                sr=0
            result = sl + sr + v
            return result
            
        s = dosum(root,L,R,0)
        return (s)
        
 Method2: BFS:
 
 class Solution(object):
    def rangeSumBST(self, root, L, R):
        ans = 0
        stack = [root]
        while stack:
            node = stack.pop()
            if node:
                if L <= node.val <= R:
                    ans += node.val
                if L < node.val:
                    stack.append(node.left)
                if node.val < R:
                    stack.append(node.right)
        return ans
