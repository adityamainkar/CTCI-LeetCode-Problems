Given a non-empty string s and an integer k, rearrange the string such that the same characters 
are at least distance k from each other.

All input strings are given in lowercase letters. If it is not possible to rearrange the string, return an empty string "".

Example 1:

Input: s = "aabbcc", k = 3
Output: "abcabc" 
Explanation: The same letters are at least distance 3 from each other.

---------------------------------------------------------------------------------------------

Create a heapq orderd by frequency from big to small. The queue length will be at most 26.
Create a cooldown dictionary, key being letter, value being remaining frequency, to hold letters in cool down state.
The values in cooling will be added back to heap after K letters.

1) If k==0 or k==1, just return s. Otherwise,
2) Pop biggest frequency letter from que, add it to result. Any time we see empty heap, return ""
3) Letter frequency -1, put it to the cool down dictionary. This we will put back in heap later (K letters wait)
4) For each iteration, pop letter that finished cooling down from the cool down dictionary, push it back to the frequency heap.
5) When it is impossible to make a valid result, the result array length must be shorter than input string. 
In such case we return "".
Time complexity O(nlgm), m is the number of distinct letter. Since k can only be 26, time complexity is O(n)


import heapq
class Solution:
    def rearrangeString(self, s: str, k: int) -> str:
        if k<=1: 
            return s
        d=collections.defaultdict(int)
        for c in s:
            d[c]+=1
        freqs=[[-d[k],k] for k in d]
        heapq.heapify(freqs)        
        cooling={}
        res=[]
        print(freqs)
        print("IN")
        while freqs:
            print("freqs = {}; cooling = {}, res={}".format(freqs,cooling,res))
            freq,c=heapq.heappop(freqs)
            res.append(c)
            freq+=1
            if freq<0:                
                cooling[c]=[freq,c]
            if len(res)>=k and res[-k] in cooling:## Pop this from Cooling, put it in heap as it can appear next time in result.
                prevFreq,prevC=cooling.pop(res[-k])
                heapq.heappush(freqs,[prevFreq,prevC])        
        return ''.join(res) if len(res)==len(s) else ""
        
        
Output:       
[[-2, 'a'], [-2, 'b'], [-2, 'c']]
IN
freqs = [[-2, 'a'], [-2, 'b'], [-2, 'c']]; cooling = {}, res=[]
freqs = [[-2, 'b'], [-2, 'c']]; cooling = {'a': [-1, 'a']}, res=['a']
freqs = [[-2, 'c']]; cooling = {'a': [-1, 'a'], 'b': [-1, 'b']}, res=['a', 'b']
freqs = [[-1, 'a']]; cooling = {'b': [-1, 'b'], 'c': [-1, 'c']}, res=['a', 'b', 'c']
freqs = [[-1, 'b']]; cooling = {'c': [-1, 'c']}, res=['a', 'b', 'c', 'a']
freqs = [[-1, 'c']]; cooling = {}, res=['a', 'b', 'c', 'a', 'b']
"abcabc"
