Given the head of a linked list, we repeatedly delete consecutive sequences of nodes that sum to 0 until there are no such sequences.

After doing so, return the head of the final linked list.  You may return any such answer.

 

(Note that in the examples below, all sequences are serializations of ListNode objects.)

Example 1:

Input: head = [1,2,-3,3,1]
Output: [3,1]
Note: The answer [1,2,1] would also be accepted.


Using 1 Pass :
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def removeZeroSumSublists(self, head: ListNode) -> ListNode:
        dummy = ListNode(0)
        dummy.next = head
        ps,d  = 0,dict()
        d[0] = dummy
        # 7 -4 3 -3 4 8    1 2 3 -3 2
        # 7  3 6  3 7 8    1 3 6  3 5
        while(head is not None):
            ps += head.val
            print(head.val)
            if ps in d.keys():
                # Remove the entries
                remove, s = d[ps].next, ps
                while(remove != head):
                    s+= remove.val
                    del d[s]
                    remove = remove.next
                # draw link after deleting Nodes
                d[ps].next = head.next
            else:    
                d[ps] = head
            head = head.next
        
        return dummy.next



Using 2 Pass: 
def removeZeroSumSublists(self, head):
        prefix = 0
        seen = {}
        seen[0] = dummy = ListNode(0)
        dummy.next = head
        while head:
            prefix += head.val
            seen[prefix] = head
            head = head.next
        head = dummy
        prefix = 0
        while head:
            prefix += head.val
            head.next = seen[prefix].next
            head = head.next
        return dummy.next
