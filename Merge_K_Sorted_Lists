# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

## Remeber:
#pq = [ ]
##heappush(pq, (10, task1))
#heappush(pq, (5, task2))
#heappush(pq, (15, task3))
#priority, task = heappop(pq)
##This works fine as long as no two tasks have the same priority; otherwise, the tasks themselves are compared (which might not work at all in Python 3).
##def __lt__(self, other):
    #return self.intAttribute < other.intAttribute


from heapq import heappush, heappop
class Solution(object):
    def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        """
        pre = cur = ListNode(0)
        heap= []
        for i in range(len(lists)):
            if(lists[i] is not None):
                heapq.heappush(heap, (lists[i].val, i, lists[i]))
        
        while(heap):
            val,llno,node = heapq.heappop(heap)
            
            cur.next = node
            cur = cur.next
            
            if(node.next is not None):
                heapq.heappush(heap, (node.next.val, llno, node.next))
                
        return pre.next 
