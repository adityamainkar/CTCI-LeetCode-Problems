
Given the root of a binary tree, find the maximum average value of any subtree of that tree.

(A subtree of a tree is any node of that tree plus all its descendants. 
The average value of a tree is the sum of its values, divided by the number of nodes.)
Example 1:
Input: [5,6,1]
Output: 6.00000
Explanation: 
For the node with value = 5 we have an average of (5 + 6 + 1) / 3 = 4.
For the node with value = 6 we have an average of 6 / 1 = 6.
For the node with value = 1 we have an average of 1 / 1 = 1.
So the answer is 6 which is the maximum.


Each child stage should pass on the sum and number of children to parent stage.
Do avg computation at parent stage.
Time Complexity: O(N)

class Solution:
    def maximumAverageSubtree(self, root: TreeNode) -> float:
        self.avg = -1
        self.dfs(root)
        return self.avg
        
        
    def dfs(self,node):
        if node is None:
            return (0,0)
        
        nl, vl= self.dfs(node.left)
        nr, vr= self.dfs(node.right)
        value = vl + vr + node.val
        number = nl + nr + 1
        sub =  value/number
        if(sub > self.avg ):
            self.avg = sub
        
        return number,value
